// Mocks generated by Mockito 5.4.0 from annotations
// in event_planner/test/event_viewer_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;
import 'dart:ui' as _i5;

import 'package:event_planner/view_model/event.dart' as _i4;
import 'package:event_planner/view_model/event_view_model.dart' as _i2;
import 'package:flutter/material.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [EventViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockEventViewModel extends _i1.Mock implements _i2.EventViewModel {
  MockEventViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get filterPastEvents => (super.noSuchMethod(
        Invocation.getter(#filterPastEvents),
        returnValue: false,
      ) as bool);
  @override
  set filterPastEvents(bool? _filterPastEvents) => super.noSuchMethod(
        Invocation.setter(
          #filterPastEvents,
          _filterPastEvents,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.Future<int?> get eventCount => (super.noSuchMethod(
        Invocation.getter(#eventCount),
        returnValue: _i3.Future<int?>.value(),
      ) as _i3.Future<int?>);
  @override
  _i3.Future<List<_i4.Event>> get events => (super.noSuchMethod(
        Invocation.getter(#events),
        returnValue: _i3.Future<List<_i4.Event>>.value(<_i4.Event>[]),
      ) as _i3.Future<List<_i4.Event>>);
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);
  @override
  _i3.Future<bool> isTitleUnique(String? title) => (super.noSuchMethod(
        Invocation.method(
          #isTitleUnique,
          [title],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
  @override
  _i3.Future<_i4.Event?> getEvent(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getEvent,
          [id],
        ),
        returnValue: _i3.Future<_i4.Event?>.value(),
      ) as _i3.Future<_i4.Event?>);
  @override
  _i3.Future<void> addEvent(
    String? title,
    String? description,
    DateTime? start,
    DateTime? end,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addEvent,
          [
            title,
            description,
            start,
            end,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<void> removeEvent(_i4.Event? event) => (super.noSuchMethod(
        Invocation.method(
          #removeEvent,
          [event],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<void> editDateTimeRange(
    DateTime? newStartDate,
    DateTime? newEndDate,
    int? id,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #editDateTimeRange,
          [
            newStartDate,
            newEndDate,
            id,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  void toggleFilter() => super.noSuchMethod(
        Invocation.method(
          #toggleFilter,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addListener(_i5.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeListener(_i5.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [NavigatorObserver].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigatorObserver extends _i1.Mock implements _i6.NavigatorObserver {
  MockNavigatorObserver() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void didPush(
    _i6.Route<dynamic>? route,
    _i6.Route<dynamic>? previousRoute,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #didPush,
          [
            route,
            previousRoute,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void didPop(
    _i6.Route<dynamic>? route,
    _i6.Route<dynamic>? previousRoute,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #didPop,
          [
            route,
            previousRoute,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void didRemove(
    _i6.Route<dynamic>? route,
    _i6.Route<dynamic>? previousRoute,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #didRemove,
          [
            route,
            previousRoute,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void didReplace({
    _i6.Route<dynamic>? newRoute,
    _i6.Route<dynamic>? oldRoute,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #didReplace,
          [],
          {
            #newRoute: newRoute,
            #oldRoute: oldRoute,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  void didStartUserGesture(
    _i6.Route<dynamic>? route,
    _i6.Route<dynamic>? previousRoute,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #didStartUserGesture,
          [
            route,
            previousRoute,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void didStopUserGesture() => super.noSuchMethod(
        Invocation.method(
          #didStopUserGesture,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
